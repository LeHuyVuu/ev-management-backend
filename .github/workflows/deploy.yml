name: Deploy Microservices to VPS

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Build & Deploy to VPS (only changed services)

    env:
      # Map service ‚Üî th∆∞ m·ª•c (t√™n service ƒë√∫ng v·ªõi docker-compose.yml)
      MAP: |
        BrandService:BrandService
        DealerService:DealerService
        FinancialService:FinancialService
        IdentityService:IdentityService
        UtilityService:UtilityService
        CustomerService:CustomerService
        IntelliAIService:IntelliAIService
        OrderService:OrderService

    steps:
      # 1) Checkout ƒë·∫ßy ƒë·ªß l·ªãch s·ª≠ ƒë·ªÉ so diff
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) X√°c ƒë·ªãnh service thay ƒë·ªïi (so v·ªõi commit tr∆∞·ªõc)
      - name: Detect changed services
        id: detect
        shell: bash
        run: |
          set -euo pipefail

          # X√°c ƒë·ªãnh base ref ƒë·ªÉ diff
          if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            BASE_REF="$(git rev-parse HEAD~1)"
          else
            git fetch origin main --depth=2
            BASE_REF="origin/main"
          fi
          echo "Base for diff: ${BASE_REF}"

          # L·∫•y danh s√°ch file thay ƒë·ªïi
          CHANGED="$(git diff --name-only "${BASE_REF}" HEAD || true)"
          echo "Changed files:"
          echo "${CHANGED}"

          # Parse map d·ªãch v·ª•
          SERVICES_CHANGED=()
          SRC_PATHS=()
          while IFS=':' read -r svc dir; do
            [ -z "${svc}${dir}" ] && continue
            if echo "${CHANGED}" | grep -qE "^${dir}/"; then
              SERVICES_CHANGED+=("${svc}")
              SRC_PATHS+=("${dir}")
            fi
          done <<< "${MAP}"

          # N·∫øu file chung thay ƒë·ªïi ‚Üí build t·∫•t
          if echo "${CHANGED}" | grep -qE '(^docker-compose\.ya?ml$)|(^compose\.ya?ml$)|(^infra/)|(^scripts/)|(^common/)|(^libs/)|(^.github/)'; then
            echo "common-changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "common-changed=false" >> "$GITHUB_OUTPUT"
          fi

          # N·∫øu kh√¥ng detect ƒë∆∞·ª£c service n√†o ‚Üí fallback build-all
          if [ "${#SERVICES_CHANGED[@]}" -eq 0 ]; then
            echo "No service-specific change detected ‚Üí will build all."
            echo "services=" >> "$GITHUB_OUTPUT"
            echo "src=." >> "$GITHUB_OUTPUT"
          else
            # T·∫°o list service & path ngu·ªìn ƒë·ªÉ copy
            printf -v SVC_LIST "%s " "${SERVICES_CHANGED[@]}"
            printf -v SRC_LIST "%s " "${SRC_PATHS[@]}"

            # Lu√¥n copy file compose & file g·ªëc c·∫ßn thi·∫øt n·∫øu c√≥
            for f in docker-compose.yml compose.yml .dockerignore Dockerfile Dockerfile.*; do
              [ -e "$f" ] && SRC_LIST="${SRC_LIST} $f"
            done

            echo "services=${SVC_LIST}" >> "$GITHUB_OUTPUT"
            echo "src=${SRC_LIST}" >> "$GITHUB_OUTPUT"
          fi

      # 3) Chu·∫©n b·ªã th∆∞ m·ª•c VPS (FIX l·ªói find -delete/-prune)
      - name: Prepare folder on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: 22
          script: |
            set -e
            sudo mkdir -p /var/www/microservices
            sudo chown -R $USER:$USER /var/www/microservices
            # Ch·ªâ d·ªçn file r√°c, KH√îNG rm -rf to√†n b·ªô ƒë·ªÉ gi·ªØ cache/layer
            find /var/www/microservices -type f -name ".DS_Store" -delete
            echo "‚úÖ Prepared /var/www/microservices (kept existing cache)."

      # 4) Copy source code (ch·ªâ path thay ƒë·ªïi, fallback to√†n repo)
      - name: Copy source code to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: 22
          source: ${{ steps.detect.outputs.src }}
          target: "/var/www/microservices"
          overwrite: true
          strip_components: 0

      # 5) Ghi .env (ghi to√†n b·ªô cho nhanh/g·ªçn)
      - name: Write .env files for Services
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: 22
          script: |
            set -e
            ENV_DIR="/var/www/microservices"
            echo "${{ secrets.ENV_BRAND }}" > "$ENV_DIR/BrandService/.env"
            echo "${{ secrets.ENV_DEALER }}" > "$ENV_DIR/DealerService/.env"
            echo "${{ secrets.ENV_FINANCIAL }}" > "$ENV_DIR/FinancialService/.env"
            echo "${{ secrets.ENV_IDENTITY }}" > "$ENV_DIR/IdentityService/.env"
            echo "${{ secrets.ENV_UTILITY }}" > "$ENV_DIR/UtilityService/.env"
            echo "${{ secrets.ENV_CUSTOMER }}" > "$ENV_DIR/CustomerService/.env"
            echo "${{ secrets.ENV_INTELLIAI }}" > "$ENV_DIR/IntelliAIService/.env"
            echo "${{ secrets.ENV_ORDER }}" > "$ENV_DIR/OrderService/.env"
            echo "üß© .env updated."

      # 6) Build & deploy: ch·ªâ build service thay ƒë·ªïi (fallback build t·∫•t)
      - name: Build & deploy Docker containers
        uses: appleboy/ssh-action@v1.0.0
        env:
          SERVICES: ${{ steps.detect.outputs.services }}
          COMMON_CHANGED: ${{ steps.detect.outputs['common-changed'] }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_KEY }}
          port: 22
          script: |
            set -euo pipefail
            cd /var/www/microservices

            # B·∫≠t BuildKit ƒë·ªÉ cache build t·ªët h∆°n
            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1

            # T√πy k·ªãch b·∫£n ƒë·ªÉ build/up
            if [ "${COMMON_CHANGED}" = "true" ] || [ -z "${SERVICES:-}" ]; then
              echo "üîÅ Full rebuild due to common changes or no detection"
              docker compose pull || true
              docker compose up -d --build --remove-orphans
            else
              echo "üß† Changed services: ${SERVICES}"
              docker compose build --parallel ${SERVICES}
              docker compose up -d ${SERVICES}
            fi

            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
            echo "üöÄ Deployment done."
